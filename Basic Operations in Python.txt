##Basic MongoDB Operations in Python

--Prerequisites

* Python 3 recommended 3.6 or above
* VScode or Pycharm

--Satrting a MongoDB cluster on Atlas
* We'll creating a new cluster and load it with the sample data 

--> 
   * Click on Get Startyed Free
   * Enter details and accept the Terms of Service
   * Create a Starter cluster
      * select the same cloud provider we're used to, picking right region
      * change the name of your cluster
      
-- Setting the Virtual Environment:

   *open terminal >cd to that directory >run following command
   
   # Note:
# On Debian & Ubuntu systems you'll first need to install virtualenv with:
# sudo apt install python3-venv
python3 -m venv venv

   * Above command will create a virtualenv in a directory called venv.
   
   # Run the following on OSX & Linux:
source venv/bin/activate

# Run the following on Windows:
.\\venv\\Scripts\\activate

   *Libraries that support MongoDb with the Python:
     1 PyMongo
     2 Motor (Also supported)
     
   Installing PyMongo::  python -m pip install pymongo[srv]==3.10.1
   
   Python-dotenv (load configuration library) :: python -m pip install python-dotenv==0.13.0
   
   
   
   ## Setting up your MongoDB instance :
      
       -- Creating a user
       -- Allowing  IP address ::  Select "Network Access" > Click "Add IP address" > Click "Add Current IP Address" > Hit "Confirm" 
       
   ## Connect to your Database : 
   
   * Connect to the cluster >  "Connect your application" and select "Python" 
   * "Connect String only" > copy  (There will be a placeholder '<' '>')
   * Create a python file in your project directory called "basic_operations.py")
   
   
import datetime   # This will be needed later
import os

from dotenv import load_dotenv
from pymongo import MongoClient

# Load config from a .env file:
load_dotenv()
MONGODB_URI = os.environ['MONGODB_URI']

# Connect to your MongoDB cluster:
client = MongoClient(MONGODB_URI)

# List all the databases in the cluster:
for db_info in client.list_database_names():
   print(db_info)
   
 
 in order to run this, you'll need to se the MongoDB_URI environment variable to connection string.
 
 
 *Run an export command to set the environment variable each time you set up your session.
 *Save the URI in a configuration file which should never be added to revision control.
 
 
 Remember it's very important not to accidently publish your credentials to git or anywhere else, so add ".env" to your gitignore file if you're using git.
 The "python-dotenv" library loads configuration from afile in the current directory called ".env".
 Create a ".env" file in the same directory as your code and paste in th econfiguration below, replacing placeholder URI with your own MongoDB URI
 
 # Unix:
export MONGODB_URI='mongodb+srv://yourusername:yourpasswordgoeshere@pythonquickstart-123ab.mongodb.net/test?retryWrites=true&w=majority'
 
 !! Important 
 URI contains your username and password (don't share and be safe!! )
 It also contains  information about the hostnamer of a DNS server which will provide information to PyMongo about your Cluster. 
 
Example Output::::::
 $ python basic_operations.py
sample_airbnb
sample_analytics
sample_geospatial
sample_mflix
sample_supplies
sample_training
sample_weatherdata
twitter_analytics
admin
local
    
   
   
You just connected your Python program to MongoDB and listed the databases in your cluster



Above code, we used "list_database_names" method to list the database names in the cluster. the "MongoClient" instance can also be used as a mapping(like a dict) to get a refrence
to a specific database. Here's example code for the collections inside the sample_mflix database. 

# Get a reference to the 'sample_mflix' database:
db = client['sample_mflix']

# List all the collections in 'sample_mflix':
collections = db.list_collection_names()
for collection in collections:
   print(collection)
   
Output ::::


$ python basic_operations.py
movies
sessions
comments
users
theaters

   
Note : A database also behaves as a mapping of collections inside that database. A collection is a bucket of documents, in the same way as a table contains rows in a traditional relational database.
The following code looks up a single document in the "movies" collection:

# Import the `pprint` function to print nested data:
from pprint import pprint

# Get a reference to the 'movies' collection:
movies = db['movies']

# Get the document with the title 'Blacksmith Scene':
pprint(movies.find_one({'title': 'Blacksmith Scene'}))

After running above code:::

{'_id': ObjectId('573a1390f29313caabcd4135'),
'awards': {'nominations': 0, 'text': '1 win.', 'wins': 1},
'cast': ['Charles Kayser', 'John Ott'],
'countries': ['USA'],
'directors': ['William K.L. Dickson'],
'fullplot': 'A stationary camera looks at a large anvil with a blacksmith '
            'behind it and one on either side. The smith in the middle draws '
            'a heated metal rod from the fire, places it on the anvil, and '
            'all three begin a rhythmic hammering. After several blows, the '
            'metal goes back in the fire. One smith pulls out a bottle of '
            'beer, and they each take a swig. Then, out comes the glowing '
            'metal and the hammering resumes.',
'genres': ['Short'],
'imdb': {'id': 5, 'rating': 6.2, 'votes': 1189},
'lastupdated': '2015-08-26 00:03:50.133000000',
'num_mflix_comments': 1,
'plot': 'Three men hammer on an anvil and pass a bottle of beer around.',
'rated': 'UNRATED',
'released': datetime.datetime(1893, 5, 9, 0, 0),
'runtime': 1,
'title': 'Blacksmith Scene',
'tomatoes': {'lastUpdated': datetime.datetime(2015, 6, 28, 18, 34, 9),
            'viewer': {'meter': 32, 'numReviews': 184, 'rating': 3.0}},
'type': 'movie',
'year': 1893}

   
